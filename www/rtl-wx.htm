<html>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" / >
<style>
  body { text-align: center; }
  .titleText { font-family: Arial; font-size:20px; margin-bottom: 4px; float: clear; }
  .titleDateText { font-family: Arial; font-size:11px; float: right; width:190px; }
  .titleDateFiller { font-family: Arial; font-size:11px; float: left; width: 190px; }
  .justGauge { width:105px; height:84px; display: inline-block; }
  .justGaugeFiller { width:50px; height:84px;display: inline-block; }
  #controlPanel { height: 15px; }
  .chartOptions { font-family: Arial; font-size:11px; text-align: center; }
</style>
<head>
<!-- Importing required js-Files -->
<script src="jquery-2.1.1.min.js"></script>
<script src="highstock.2.0.4.js"></script>
<script src="raphael.2.1.0.min.js"></script>
<script src="justgage.1.0.1.mod.js"></script>

<!-- js-function for reading csv and options for graph -->
<script type="text/javascript">
   var gOutdoor, gStudy, gAttic, gSunroom, gStudio, gBedroom, gElectric, gOil;
   var chart;
   
   //                                                 0-Blue                  1-Yellow             2-Orange       3-light purple      4-light green     5-grey             6-light raspberry    7-light brown
   //                                     outside, dewpoint     bedroom-in dew       sunroom          electricity             studio             pressure, oil            study              attic, in out diff
   var displayColors=['#7cb5ec','#E9E581','#f7a35c','#8085e9','#90ed7d', '#787174', '#BF52AF', '#A3804E'];  
   Highcharts.setOptions({ global: { useUTC: false }});
   
   var titleFontColor = '#838383';
   var labelFontColor = '#636363'; 
   window.onload = function(){
    gOutdoor = new JustGage({ id: "gOutdoor", value: 0, valueSymbol: "\u00B0", min: 0, max: 100, 
     levelColors: [ displayColors[0] ], titleFontColor: titleFontColor, labelFontColor: labelFontColor,
     title: "Outside", label: "", levelColorsGradient: false });
    gBedroom = new JustGage({ id: "gBedroom",  value: 0, valueSymbol: "\u00B0", min: 0, max: 100,
     levelColors: [ displayColors[1] ], titleFontColor: titleFontColor, labelFontColor: labelFontColor,
     title: "Bedroom", label: "", levelColorsGradient: false });
    gSunroom = new JustGage({ id: "gSunroom", value: 0, valueSymbol: "\u00B0", min: 0, max: 100, 
     levelColors: [ displayColors[2] ], titleFontColor: titleFontColor, labelFontColor: labelFontColor,
     title: "Sunroom", label: "", levelColorsGradient: false });
    gStudy = new JustGage({ id: "gStudy",  value: 0, valueSymbol: "\u00B0", min: 0, max: 100,
     levelColors: [ displayColors[6] ], titleFontColor: titleFontColor, labelFontColor: labelFontColor,
     title: "Study", label: "", levelColorsGradient: false });
    gStudio = new JustGage({ id: "gStudio",  value: 0, valueSymbol: "\u00B0", min: 0, max: 100,
     levelColors: [ displayColors[4] ], titleFontColor: titleFontColor, labelFontColor: labelFontColor,
     title: "Studio", label: "", levelColorsGradient: false });
    gAttic = new JustGage({ id: "gAttic",  value: 0, valueSymbol: "\u00B0", min: 0, max: 140,
     levelColors: [ displayColors[7] ], titleFontColor: titleFontColor, labelFontColor: labelFontColor,
     title: "Attic", label: "", levelColorsGradient: false });
    gElectric = new JustGage({ id: "gElectric",  value: 0, valueSymbol: "w", min: 0, max: 3000,
     levelColors: [ displayColors[3] ], titleFontColor: titleFontColor, labelFontColor: labelFontColor,
     title: "Electricity", label: "", levelColorsGradient: false });
    gOil = new JustGage({ id: "gOil",  value: 0, valueSymbol: "$", min: 0, max: 3.5,
     levelColors: [ displayColors[5] ], titleFontColor: titleFontColor, labelFontColor: labelFontColor,
     title: "Oil Burner", label: "", levelColorsGradient: false });
     };
   var options = {
	chart: { renderTo: 'chart', zoomType: 'x', spacingBottom: 7, marginBottom: 55 },
	title: { text: '' },     
	 //subtitle: { text: 'Watts' },   
	xAxis: { type: 'datetime',  gridLineWidth: 1,
		dateTimeLabelFormats: { day : '<b>%A</b>', hour: '%l%P' } ,
	        events: { afterSetExtremes: afterSetExtremes } },
	rangeSelector:{ enabled:true, inputEnabled: false,
	    buttonTheme: { width : 55 }, selected: 0, allButtonsEnabled: true,
	    buttons: [ 
	     { type: 'all', text: 'All' }, 
	     { type: 'month', count: 6, text: '6 Months' }, 
	     { type: 'month', count: 3, text: '3 Months' }, 
	     { type: 'month', count: 1, text: '1 Month' }, 
	     { type: 'week', count: 2, text: '2 Weeks' }, 
	     { type: 'week', count: 1, text: '1 Week' }, 
	     { type: 'day', count: 3, text: '3 Days' },
	     { type: 'day', count: 1, text: '1 Day' }] },
	// the value axis
	yAxis: [{ // Primary yAxis 
	     labels: {  style: { color: Highcharts.getOptions().colors[0] } },
	     title: { text: 'Temperature', style: { color: Highcharts.getOptions().colors[0] } },
	     type: 'spline',
	     minorTickInterval: 'auto',
             showEmpty: false,
	     opposite: false
	 }, { // Secondary yAxis 	     
	     labels: {  style: { color: displayColors[5] } },
	     title: { text: 'Pressure', style: { color: displayColors[5] } },
	     type: 'spline',
	     minorTickInterval: 'auto',
             showEmpty: false,
	     opposite: true
	 }, { // tertiary yAxis 	     
	     labels: {  format: '${value:.2f}', style: { color: displayColors[5] } },
	     title: { text: 'Fuel Oil Consumption', style: { color: displayColors[5] } },
	     type: 'column',
	     floor: 0,
	     minorTickInterval: 'auto',
             showEmpty: false,
	     opposite: true
	 }, { // 4th  yAxis 	     
            labels: { formatter: function () { return parseInt(this.value,10)/1000 + ' kW'; },
			  style: { color: displayColors[3] } },
            title: { text: 'Electricity Usage', style: { color: displayColors[3] } },
	    type: 'spline',
	    minorTickInterval: 'auto',
            showEmpty: false,
            opposite: false
        }, { // 5th Axis
            title: { text: 'In/Out Temperature Difference', 
                style: { color: displayColors[7] } },
            labels: { format: '{value}°F', style: { color: displayColors[7] } },
	    type: 'spline',
	    floor: 0,
	    minorTickInterval: 'auto',
            showEmpty: false,
            opposite: true
        }],	 tooltip: { shared: true, positioner: function(boxWidth, boxHeight, point) { 
	                 return { x: (point.plotX<90?point.plotX+90: point.plotX-70), 
			 y: (point.plotY<50?50:point.plotY>210?210:point.plotY) };},
			hideDelay: 0 }, 
	series: [] 
    };
   
   // Chart uses a completely different dataset depending on the date range button that's selected
   var chartDataSets = [ // State can be either 'init', 'loading',  'ready'
	{ name: 'short',  state: 'init', filename: 'rtl-wx-15min.csv', 
	  data0:[],data1:[],data2:[],data3:[],data4:[],data5:[],
	  data6:[],data7:[],data8:[],data9:[],data10:[],data11:[]},
	{ name: 'medium', state: 'init', filename: 'rtl-wx-1hr.csv', 
	  data0:[],data1:[],data2:[],data3:[],data4:[],data5:[],
	  data6:[],data7:[],data8:[],data9:[],data10:[],data11:[]},	
	{ name: 'long',   state: 'init', filename: 'rtl-wx-daily.csv', 
	  data0:[],data1:[],data2:[],data3:[],data4:[],data5:[],
	  data6:[],data7:[],data8:[],data9:[],data10:[],data11:[] }];
   var currentDataSetIndex;

   // Predefine a series object for each data series that the chart will/might contain  
   var  series0 = { name: 'Outside',            color: displayColors[0], animation: false,
			 data: [],
			//dashStyle: 'shortdot',
			marker:  { enabled: false },
			 tooltip: { valueSuffix: '°F'} },
	series1 = { name: 'Bedroom',            color: displayColors[1], animation: false,
			 data: [],
			//dashStyle: 'shortdot',
			marker: { enabled: false },
			 tooltip: { valueSuffix: '°F'}},
	series2 = { name: 'Sunroom',            color: displayColors[2], animation: false,
			 data: [],
			//dashStyle: 'shortdot',
			marker: { enabled: false },
			 tooltip: { valueSuffix: '°F'}},
	series3 = { name: 'Study',              color: displayColors[6], animation: false,
			 data: [],
			//dashStyle: 'shortdot',
			marker: { enabled: false },
			tooltip: { valueSuffix: '°F'}},
	series4 = { name: 'Studio',             color: displayColors[4], animation: false,
			data: [],
			//dashStyle: 'shortdot',
			marker: { enabled: false },
			 tooltip: { valueSuffix: '°F'}},
	series5 = { name: 'Attic',              color: displayColors[7], animation: false,
			data: [],
			//dashStyle: 'shortdot',
			marker: { enabled: false },
			tooltip: { valueSuffix: '°F'}},
	series6 = { name: 'Dewpoint Out',       color: displayColors[0], animation: false,
			data: [],
			dashStyle: 'shortdot',
			marker: { enabled: false },
			tooltip: { valueSuffix: '°F'}},
	series7 = { name: 'Dewpoint In',        color: displayColors[1], animation: false,
			data: [],
			dashStyle: 'shortdot',
			marker: { enabled: false },
			tooltip: { valueSuffix: '°F'}},			
	series8 = { name: 'Pressure',           color: displayColors[5], animation: false,
			data: [],
			yAxis: 1,
			dashStyle: 'longdash',
			marker: { enabled: false }, 
			tooltip: { valueDecimals:2, valueSuffix: ' in'}}, 
	series9 = { name: 'Fuel Cost',          color: displayColors[5], animation: false,
			type: 'area',
			yAxis: 2,
                        data: [],
			step: true,
			marker: { enabled: false },
                        tooltip: { valueDecimals: 2, valuePrefix: '$' }},
	series10 = { name: 'Electricity Usage', color: displayColors[3], animation: false,
			data: [],
			yAxis: 3,
			type: 'area',
			step: true,
			marker: { enabled: false }, 
			tooltip: { valueSuffix: ' Watts'}},
	series11 = { name: 'In/Out Diff',       color: displayColors[7], animation: false,
			yAxis: 4,
                        data: [],
			//step: true,
			dashStyle: 'shortdot',
			marker:  { enabled: false },
                        tooltip: { valueSuffix: '°F'} };			
 $(document).ready(function() {  
 
 $.get('rtl-wx-latest.csv', function(data) {
     // rtl-wx-latest.csv has just one data record with latest information from all sensors plus some calculated energy values.
     // The extra data means the format is differentfrom the other 'timed' csv files.
     //  index:    0         1                    2                      3                        4               5                6                   7                             8                  9          
     //             Time,efergyWatts,efergyLastHr,efergyLastDay,owlWatts,owlLastHr,owlLastDay,fuelGallonsLastHr,fuelLastDay,fuelTotal,
     //            oduTemp,oduDewpoint,iduTemp,iduDewpoint,ext1Temp,ext1Dewpoint,ext2Temp,ext2Dewpoint,ext3Temp,ext3Dewpoint,ext4Temp,ext4Dewpoint,iduSealevelPressure
     //  index:  10             11                   12            13                   14              15                    16              17                     18              19                     20             21                     22
     //
     var lastTimestamp, efergywatts, efergyLastDay, fuelCostLastHr, fuelCostLastDay, oduTemp, oduDewpoint, iduTemp, iduDewpoint,
       ext1Temp, ext1Dewpoint, ext2Temp, ext2Dewpoint, ext3Temp, ext3Dewpoint, ext4Temp, ext4Dewpoint, iduPressure;
    
     // Split the lines
     var lines = data.split('\n');
     $.each(lines, function(lineNo, line) {  
	  var items = line.split(',');
	  var timestamp = parseFloat(items[0])*1000;
	  if(!isNaN(timestamp)) {
		efergywatts = parseFloat(items[1]);
		efergyLastDay = Math.round((parseFloat(items[3])/1000*24)*10)/10;
		fuelCostLastHr = Math.round(parseFloat(items[7])*3.50*100)/100;
		fuelCostLastDay = Math.round(parseFloat(items[8])*3.50*100)/100;
		oduTemp = parseFloat(items[10]);
		oduDewpoint = parseFloat(items[11]);
		iduTemp = parseFloat(items[12]);
		iduDewpoint = parseFloat(items[13]);
		ext1Temp = parseFloat(items[14]);
		ext1Dewpoint = parseFloat(items[15]);
		ext2Temp = parseFloat(items[16]);
		if (ext2Temp > 100)
		   ext2Temp = Math.round(ext2Temp);
		
		ext2Dewpoint = parseFloat(items[17]);
		ext3Temp = parseFloat(items[18]);
		ext3Dewpoint = parseFloat(items[19]);
		ext4Temp = parseFloat(items[20]);
		ext4Dewpoint = parseFloat(items[21]);
		iduPressure = parseFloat(items[22]);
		
		lastTimestamp = timestamp;
	  }
       }); // For each
     gOutdoor.refresh(oduTemp, "Dewpoint "+oduDewpoint+"°");
     gStudio.refresh(iduTemp, "Dewpoint "+iduDewpoint+"°");          
     gSunroom.refresh(ext1Temp, "Dewpoint "+ext1Dewpoint+"°");          
     gAttic.refresh(ext2Temp, "Dewpoint "+ext2Dewpoint+"°");
     gBedroom.refresh(ext3Temp, "Dewpoint "+ext3Dewpoint+"°");          
     gStudy.refresh(ext4Temp, "Dewpoint "+ext4Dewpoint+"°");      
     gElectric.refresh(efergywatts, "Last Day "+efergyLastDay+"kW");
     gOil.refresh(fuelCostLastHr, "Last Day $"+fuelCostLastDay);
 
     var options = {weekday: "short", year: "numeric", month: "short", day: "numeric", hour: "numeric", minute: "numeric"};
     $('.titleDateText').text('Updated: '+ new Date(lastTimestamp).toLocaleString("en-US",options));
    }); // $get... gauge data

 loadChartDataFromFile(true, 0, 0);
    
 $('.choice').change(function() {
	// When a checkbox is changed, check to see if a new dataset needs to get loaded or activated
            var currentBox = $(this);
            var isChecked = currentBox.is(':checked');
            var wasChecked = currentBox.data("wasChecked");
            var value = $(this).val();

            if (!wasChecked && isChecked) {
		var series;
                if (value == "AtticTemp")
		   series = chart.addSeries(series5);
		else if (value == "OutDewpoint")
		   series = chart.addSeries(series6);
		else if (value == "InDewpoint")
		   series = chart.addSeries(series7);
		else if (value == "Pressure")
		   series = chart.addSeries(series8);
		else if (value == "FuelCost")
		   series = chart.addSeries(series9);
		else if (value == "ElectricityUsage")
		   series = chart.addSeries(series10);
		else if (value == "InOutTempDiff")
		   series = chart.addSeries(series11);
		   currentBox.data("series", series);
            }
            
            if (wasChecked && !isChecked) {
		var series = currentBox.data("series");
                series.remove();
            }
            if (isChecked) 
	       currentBox.data("wasChecked", true);
            else 
               currentBox.data("wasChecked", false); 	
 }); // checkbox changed 
    
 }); // Document.ready...

 function loadChartDataFromFile(initChartFlag, oldDataSetIndex, newDataSetIndex) {

 chartDataSets[newDataSetIndex].state = 'loading';
 currentDataSetIndex = newDataSetIndex;

 // Get  the data csv file from the server asynchronously and process the data line by line in the callback
 $.get(chartDataSets[newDataSetIndex].filename, function(data) {
   var efergywatts, fuelCost, oduTemp, oduDewpoint, iduTemp, iduDewpoint,
     ext1Temp, ext1Dewpoint, ext2Temp, ext2Dewpoint, ext3Temp, ext3Dewpoint, ext4Temp, ext4Dewpoint, 
     iduPressure, tempDiff;
      
   // Split the lines
   var lines = data.split('\n');
   $.each(lines, function(lineNo, line) {    
	if (lineNo > 1) { // Skip over header line
	  var items = line.split(',');
	  var timestamp = parseFloat(items[0])*1000;
	  //var startTimestamp = (1426536900*1000) - (3600*24*60*1000);	  // for debug - used with large static test datasets (eg 10k, 35k, 50k)
	  var startTimestamp=0;
	  if (initChartFlag == true)
		startTimestamp = new Date().getTime()-(3600*24*3.2*1000); // Load 3 days worth of data  at start
	  if(!isNaN(timestamp) && (timestamp >= startTimestamp)) {
		efergywatts = parseInt(items[1]);
		owlwatts = parseInt(items[2]);
		fuelCost = parseFloat(items[3])*3.50;
		oduTemp = parseFloat(items[4]);
		oduDewpoint = parseFloat(items[5]);
		iduTemp = parseFloat(items[6]);
		iduDewpoint = parseFloat(items[7]);
		ext1Temp = parseFloat(items[8]);
		ext1Dewpoint = parseFloat(items[9]);
		ext2Temp = parseFloat(items[10]);
		ext2Dewpoint = parseFloat(items[11]);
		ext3Temp = parseFloat(items[12]);
		ext3Dewpoint = parseFloat(items[13]);
		ext4Temp = parseFloat(items[14]);
		ext4Dewpoint = parseFloat(items[15]);
		iduPressure = parseFloat(items[16]);
		
		tempDiff = Math.abs(oduTemp-((ext1Temp+ext3Temp+ext4Temp)/3));
		tempDiff = Math.round(tempDiff * 10) / 10;
		
		chartDataSets[newDataSetIndex].data0.push([timestamp, oduTemp]);  // Outside
		chartDataSets[newDataSetIndex].data1.push([timestamp, ext3Temp]); // Bedroom
		chartDataSets[newDataSetIndex].data2.push([timestamp, ext1Temp]); // Sunroom
		chartDataSets[newDataSetIndex].data3.push([timestamp, ext4Temp]); // Study 
		chartDataSets[newDataSetIndex].data4.push([timestamp, iduTemp]);  // Studio
		chartDataSets[newDataSetIndex].data5.push([timestamp, ext2Temp]); // Attic
		chartDataSets[newDataSetIndex].data6.push([timestamp, oduDewpoint]); // Outside Dewpoint
		chartDataSets[newDataSetIndex].data7.push([timestamp, ext3Dewpoint]); // Inside Dewpoint
		chartDataSets[newDataSetIndex].data8.push([timestamp, iduPressure]); 
		chartDataSets[newDataSetIndex].data9.push([timestamp, fuelCost]); 
		chartDataSets[newDataSetIndex].data10.push([timestamp, efergywatts]); 
		chartDataSets[newDataSetIndex].data11.push([timestamp, tempDiff]); 
	  }
	}
       }); // for each line in file

     chartDataSets[newDataSetIndex].state = 'ready';
     if (initChartFlag == true) {
        // initialize the chart
	series0.data = chartDataSets[newDataSetIndex].data0;
	series1.data = chartDataSets[newDataSetIndex].data1;
	series2.data = chartDataSets[newDataSetIndex].data2;
	series3.data = chartDataSets[newDataSetIndex].data3;
	series4.data = chartDataSets[newDataSetIndex].data4;
	series5.data = chartDataSets[newDataSetIndex].data5;
	series6.data = chartDataSets[newDataSetIndex].data6;
	series7.data = chartDataSets[newDataSetIndex].data7;
	series8.data = chartDataSets[newDataSetIndex].data8;
	series9.data = chartDataSets[newDataSetIndex].data9;
	series10.data = chartDataSets[newDataSetIndex].data10;
	series11.data = chartDataSets[newDataSetIndex].data11;

	// For performance reasons, load only some of the available data series.  The rest can be loaded by user  later by checking boxes
	options.series.push(series0); 
	options.series.push(series1); 
	options.series.push(series2); 
	options.series.push(series3); 
	options.series.push(series4); 

	// Create the chart
	chart = new Highcharts.Chart(options);
	chart.rangeSelector.clickButton(6, chart.rangeSelector.buttonOptions[6], true); // select 3 day range
     } else 
       swapChartDataSet(oldDataSetIndex, newDataSetIndex);

    }); // $get... chart data
 }; // loadChartDataFromFile()
 
 function swapChartDataSet(oldDataSetIndex, newDataSetIndex) {
   //alert('setting data set to ' + chartDataSets[newDataSetIndex].filename);
   currentDataSetIndex = newDataSetIndex;
   series0.data = chartDataSets[newDataSetIndex].data0;
   series1.data = chartDataSets[newDataSetIndex].data1;
   series2.data = chartDataSets[newDataSetIndex].data2;
   series3.data = chartDataSets[newDataSetIndex].data3;
   series4.data = chartDataSets[newDataSetIndex].data4;
   series5.data = chartDataSets[newDataSetIndex].data5;
   series6.data = chartDataSets[newDataSetIndex].data6;
   series7.data = chartDataSets[newDataSetIndex].data7;
   series8.data = chartDataSets[newDataSetIndex].data8;
   series9.data = chartDataSets[newDataSetIndex].data9;
   series10.data = chartDataSets[newDataSetIndex].data10;
   series11.data = chartDataSets[newDataSetIndex].data11;

   while( chart.series.length > 0 ) {
     chart.series[0].remove( false );
   }
   
   chart.addSeries(series0, false);
   chart.addSeries(series1, false);
   chart.addSeries(series2, false);
   chart.addSeries(series3, false);
   chart.addSeries(series4, false);

   // Determine new  xAxis xmin and xmax based on selected range button
   var rangeOptions = chart.rangeSelector.buttonOptions[chart.rangeSelector.selected];
   var days;
   if (rangeOptions.type == 'day') {
     days = rangeOptions.count;
   } else if (rangeOptions.type == 'week') {
     days = rangeOptions.count * 7;
   } else if (rangeOptions.type == 'month') {
     days = rangeOptions.count * 30;
   } else {
     days = Number.MAX_VALUE; //  All   
   }
   var max = new Date().getTime();
   var min = max - (3600*24*days*1000);
   if (min < chartDataSets[newDataSetIndex].data0[0][0])
     min = chartDataSets[newDataSetIndex].data0[0][0];
   var chartMax= chartDataSets[newDataSetIndex].data0[chartDataSets[newDataSetIndex].data0.length-1][0]
   if (max > chartMax)
      max = chartMax;

   // Change type of electric and oil series based on chart interval. If All button is selected) interval is daily, otherwise use area chart
   if (days == Number.MAX_VALUE) {
      series9.type = 'column';
      series10.type = 'column';
   } else {
      series9.type = 'area';
      series10.type = 'area';
   }  
      
   // Add seies associated with any selected checkboxes and save the series in the checkbox obj so series can be removed on uncheck
   var series;
   if ($('#AtticTemp').is(':checked')) {
     series = chart.addSeries(series5, false);
     $('#AtticTemp').data("series", series);
   }
   if ($('#OutDewpoint').is(':checked')) {
     series = chart.addSeries(series6, false);
     $('#OutDewpoint').data("series", series);
   }
   if ($('#InDewpoint').is(':checked')) {
     series = chart.addSeries(series7, false);
     $('#InDewpoint').data("series", series);
   }     
   if ($('#Pressure').is(':checked')) {
     series = chart.addSeries(series8, false);
     $('#Pressure').data("series", series);
   }
   if ($('#FuelCost').is(':checked')) {
     series = chart.addSeries(series9, false);
     $('#FuelCost').data("series", series);
   }
   if ($('#ElectricityUsage').is(':checked')) {
     series = chart.addSeries(series10, false);
     $('#ElectricityUsage').data("series", series);
   }
   if ($('#InOutTempDiff').is(':checked')) {
     series = chart.addSeries(series11, false);
     $('#InOutTempDiff').data("series", series);
   }
      
   chart.xAxis[0].setExtremes(min, max, false);
   chart.redraw();  
 }; // swap chart data set

 function afterSetExtremes(e) {
 
        if (('rangeSelectorButton' in e) == false)
	  return; // callback invoked for  reason other than range selector button press

	var newIndex = currentDataSetIndex;
	var newDayFormat;
	if (e.rangeSelectorButton.type == 'day') {
	   newIndex = 0;
	   newDayFormat = '<b>%A</b>';
	} else if (e.rangeSelectorButton.type == 'week') {
	   newIndex = 1;
	   newDayFormat = '%a %b %e';
	} else if (e.rangeSelectorButton.type == 'month') {
	   newIndex = 1;
	   newDayFormat = '%b %e';
	} else {
	   newIndex = 2;
	   newDayFormat = '%b %e';
	}
	chart.xAxis[0].update({ dateTimeLabelFormats: { day : newDayFormat } }, false);
	
	if (newIndex != currentDataSetIndex) {
	  // Need to replace chart data but use timeout function to let chart event processing finish up first
	  // Without the timeout,  rangeselector button state won't be updated completely which causes problems in swapChartDataSet
	  setTimeout(function(){
	   if (chartDataSets[newIndex].state == 'init')
	    loadChartDataFromFile(false, currentDataSetIndex, newIndex);
	   else if (chartDataSets[newIndex].state == 'ready')
	    swapChartDataSet(currentDataSetIndex, newIndex);
	   else {
	    // probably still waiting for  last load operation to complete (state == loading)
	    alert('Waiting for file '+ chartDataSets[newDataSetIndex].filename + ' to load...');
	   } 
	  }, 1); // setTimeout
	}
	else
	  chart.redraw();
  };
 
 </script></head>
<body><div class="titleText"><div class="titleDateFiller">&nbsp</div>RTL-Wx Home Monitor<div class="titleDateText">&nbsp</div></div>
<div id="gOutdoor" class="justGauge"></div>
<div id="gBedroom" class="justGauge"></div>
<div id="gSunroom" class="justGauge"></div>
<div id="gStudy" class="justGauge"></div>
<div id="gStudio" class="justGauge"></div>
<div id="gAttic" class="justGauge"></div>
<div class="justGaugeFiller"></div>
<div id="gElectric" class="justGauge"></div>
<div id="gOil" class="justGauge"></div> 
<div id="chart" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
<div id="controlPanel"><div class="chartOptions"><form action="">
<input type="checkbox" class="choice" name="choice" id="AtticTemp" value="AtticTemp">Attic Temperature&nbsp;
<input type="checkbox" class="choice" name="choice" id="OutDewpoint" value="OutDewpoint">Dewpoint Outside&nbsp;
<input type="checkbox" class="choice" name="choice" id="InDewpoint" value="InDewpoint">Dewpoint Inside&nbsp;
<input type="checkbox" class="choice" name="choice" id="Pressure" value="Pressure">Barometric Pressure&nbsp;
<input type="checkbox" class="choice" name="choice" id="FuelCost" value="FuelCost">Oil Consumption&nbsp;
<input type="checkbox" class="choice" name="choice" id="ElectricityUsage" value="ElectricityUsage">Electricity Usage&nbsp;
<input type="checkbox" class="choice" name="choice" id="InOutTempDiff" value="InOutTempDiff">In-Out Temp Diff
</form></div></div>
</body>
</html>